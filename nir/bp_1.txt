using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Globalization;
using System.Threading;

namespace my_pp
{
	public class bp
	{
		public static List<point> BP_set(byte bp, List<point> l, int count_point)
		{
			if (bp == 1)
			{
				point max_point_by_y = l[0];
				int index_max_point_by_y = 0;
				foreach (point elm in l)
				{
					if (elm.get_y() > max_point_by_y.get_y())
					{
						max_point_by_y = elm;
						index_max_point_by_y = l.IndexOf(elm);
					}
				}
				int crazy = index_max_point_by_y;
				if (crazy != 0)
				{
					List<point> f = new List<point>();
					for (int i = index_max_point_by_y; i < count_point - 1; i++)
						f.Add(l[i]);
					for (int i = 0; i < index_max_point_by_y + 1; i++)
						f.Add(l[i]);
					l = f;
				}
			}
			else
			{
				point min_point_by_y = l[0];
				int index_min_point_by_y = 0;
				foreach (point elm in l)
				{
					if (elm.get_y() < min_point_by_y.get_y())
					{
						min_point_by_y = elm;
						index_min_point_by_y = l.IndexOf(elm);
					}

				}
				int crazy = index_min_point_by_y;
				if (crazy != 0)
				{
					List<point> f = new List<point>();
					for (int i = index_min_point_by_y; i < count_point - 1; i++)
						f.Add(l[i]);
					for (int i = 0; i < index_min_point_by_y + 1; i++)
						f.Add(l[i]);
					l = f;
				}
			}
			return l;
		}

		public static byte BP_get(List<point> l, int count_point)
		{
			byte bp = 0;
			point max_point_by_y = l[0];
			int index_max_point_by_y = 0;
			point min_point_by_y = l[0];
			int index_min_point_by_y = 0;

			foreach (point elm in l)
			{
				if (elm.get_y() > max_point_by_y.get_y())
				{
					max_point_by_y = elm;
					index_max_point_by_y = l.IndexOf(elm);
				}
				else if (elm.get_y() < min_point_by_y.get_y())
				{
					min_point_by_y = elm;
					index_min_point_by_y = l.IndexOf(elm);
				}

			}

			if (index_max_point_by_y == 0)
			{
				bp = 1;
			}
			else if (index_min_point_by_y == 0)
			{
				bp = 0;
			}
			else Console.WriteLine("Ошибка.Не возможно считать бит!");
			return bp;
		}
	}

	public class point
	{
		decimal x;
		decimal y;
		public point(decimal xx, decimal yy)
		{
			x = xx;
			y = yy;
		}
		public string pointToString()
		{
			// Замена запятых на точки нужна
			string x_y = x + " " + y;
			return x_y;
		}

		public decimal get_y()
		{
			return y;
		}

		public decimal get_x()
		{
			return x;
		}

	}

	public class Region_1
	{
		public List<point> l;
		public string count_point;
		public string Pen_field;
		public string Brush_field;
		public Region_1(List<point> ll, string count_point_loc, string P_f, string B_f)
		{
			l = ll;
			count_point = count_point_loc;
			Pen_field = P_f;
			Brush_field = B_f;

		}

	}
	//	/////////////////////////////////////////////////////
	//	/// public class point
	//	{
	//		double x;
	//	double y;
	//	public point(double xx, double yy)
	//	{
	//		x = xx;
	//		y = yy;
	//	}
	//	public string pointToString()
	//	{
	//		string x_y = x + " " + y;
	//		return x_y;
	//	}
	//	public double get_y()
	//	{
	//		return y;
	//	}

	//	public double get_x()
	//	{
	//		return x;
	//	}

	//}
	//	/// <summary>
	//	/// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	///////////////Свернуть написанное в функцию встривания, принимающую на вход полигон и бит (1 или 0), подфункции поиска максимума и сдвига и минимума и сдвига
	//	List<List<point>> R = new List<List<point>>();
	//	int count_point = 5;
	//	List<point> l = new List<point>();
	//			for (int i = 0; i<count_point-1; i++)
	//			{
	//				// Получить случайное число (в диапазоне от  до )
	//				Random rnd = new Random((int)DateTime.Now.Millisecond);
	//	double rrr = 9.0D;
	//	double x = (rnd.NextDouble()) * rrr;
	//	double y = (rnd.NextDouble()) * rrr;
	//	//float x, y;
	//	//Console.WriteLine(" Enter x: ");
	//	//float.TryParse(Console.ReadLine(), out x);
	//	//Console.WriteLine(" Enter y: ");
	//	//float.TryParse(Console.ReadLine(), out y);
	//	point p = new point(x, y);
	//	l.Add(p);
	//				Console.WriteLine("Elem: index= " + i + " (x,y) => (" + x + "," + y + ")");
	//				Thread.Sleep(50);
	//			}
	//point k = new point(l[0].get_x(), l[0].get_y());
	//l.Add(k);
	//			Console.WriteLine("Elem: index= " +(count_point-1)+ " (x,y) => (" +l[count_point - 1].get_x()  + "," + l[count_point - 1].get_y() + ")");

	//			point max_point_by_y = l[0];
	//int index_max_point_by_y = 0;
	//point min_point_by_y = l[0];
	//int index_min_point_by_y = 0;

	//			foreach (point elm in l)
	//			{
	//				if (elm.get_y() > max_point_by_y.get_y())
	//				{
	//					max_point_by_y = elm;
	//					index_max_point_by_y = l.IndexOf(elm);
	//				}
	//				else if (elm.get_y() < min_point_by_y.get_y())
	//				{
	//					min_point_by_y = elm;
	//					index_min_point_by_y = l.IndexOf(elm);
	//				}

	//			}
	//			Console.WriteLine("Element max: " + max_point_by_y.get_y() + " with index: " + index_max_point_by_y);
	//			//Console.WriteLine("Element min: " + min_point_by_y.get_y() + " with index: " + index_min_point_by_y);
	//			int crazy = index_max_point_by_y;
	//			if (crazy != 0) 
	//			{
	//				List<point> f = new List<point>();
	//				for (int i = index_max_point_by_y; i<count_point-1; i++) 
	//					f.Add(l[i]);
	//				for (int i = 0; i<index_max_point_by_y + 1; i++)
	//					f.Add(l[i]);
	//				l = f;
	//			}
	//			for (int i = 0; i<count_point; i++)
	//				Console.WriteLine("Elem: index= " + i + " (x,y) => (" + l[i].get_x() + "," + l[i].get_y() + ")");
	//		}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class MainClass
	{
		

		public static void Main(string[] args)
		{
			List<Region_1> R = new List<Region_1>();
			int j = 0;
			try
			{   // Open the text file using a stream reader.
				using (StreamReader sr = new StreamReader("C:\\Users\\Asus-\\Desktop\\tester.mif"))
				{
					using (System.IO.StreamWriter file = new System.IO.StreamWriter("C:\\Users\\Asus-\\Desktop\\tup11.mif"))
					{
						// Список, состоящий из списков точек-вершин -полигон


						//string Penn = ("Pen");
						//string Brushh = ("Brush");

						//int next = 0;

						while (!sr.EndOfStream)
						{
							string line = sr.ReadLine();
							string Reg = ("Region 1");
							if (!line.Contains(Reg))
							{ 
								//Console.WriteLine(line);
								file.WriteLine(line);
							}


							if (line.Contains(Reg))
							{
								//Console.WriteLine("Region number: " + j);
								//file.WriteLine("Region number: " + j);
								j++;
								List<point> l = new List<point>();
								int count_point_loc = Convert.ToInt32(sr.ReadLine());
								//Console.WriteLine("count_point: " + count_point_loc);
								for (int i = 0; i < count_point_loc; i++)
								{
									string x_y_point = sr.ReadLine();
									//x_y_point = Double.sr.ToString();
									decimal x = 0;
									decimal y = 0;
									var str = x_y_point.Split(' ');
									//Console.WriteLine(str[0]);
									//Console.ReadKey();
									x = Convert.ToDecimal(str[0], CultureInfo.GetCultureInfo("en-US"));
									y = Convert.ToDecimal(str[1], CultureInfo.GetCultureInfo("en-US"));
									//Double.TryParse(str[0], out x);
									//Double.TryParse(str[1], out y);
									point p = new point(x, y);
									l.Add(p);
								}

								string vedro1 = sr.ReadLine();
								string vedro2 = sr.ReadLine();
								//if (sr.ReadLine().Contains(Penn))
								//{
								//	vedro1 = sr.ReadLine();
								//}
								//if (sr.ReadLine().Contains(Brushh))
								//{
								//	vedro2 = sr.ReadLine();
								//}

								Region_1 RR = new Region_1(l, Convert.ToString(count_point_loc), vedro1, vedro2);
								R.Add(RR); //добавления нового полигона в список полигонов
								file.WriteLine("Region 1");
								file.WriteLine("  " + Convert.ToString(RR.count_point));
								//Console.WriteLine();
								//запись полигонов точек полигона в файл
								foreach (point pp in RR.l)
								{
									file.WriteLine(pp.pointToString().Replace(",", "."));
								}
								file.WriteLine("  " + RR.Pen_field);
								file.WriteLine("  " + RR.Brush_field);
							}

							//foreach (Region_1 elm in R)
							//{
							//	file.WriteLine("Region 1");
							//	file.WriteLine("  " + elm.count_point);
							//	//Console.WriteLine();
							//	//запись полигонов точек полигона в файл
							//	foreach (point pp in elm.l)
							//	{
							//		file.WriteLine(pp.pointToString().Replace(",", "."));
							//	}
							//	file.WriteLine("  " + elm.Pen_field);
							//	file.WriteLine("  " + elm.Brush_field);
							//}

						}
						file.Close();
						Console.WriteLine("Kolich Reg = " + j);
					}
				}


			}
			catch (Exception e)
			{
				Console.WriteLine("The file could not be read:");
				Console.WriteLine(e.Message);
			}
			Console.WriteLine("BEFORE");
			int ind = 0;
			foreach (Region_1 elm in R)
			{
				Random rnd = new Random();
				Byte[] b_before = new Byte[j];
				b_before[ind]=(Byte)rnd.Next(0,2);
				Console.Write(b_before[ind]);
				Console.Write(' ');
				elm.l = bp.BP_set(b_before[ind], elm.l, Convert.ToInt32(elm.count_point));
				ind++;
				Thread.Sleep(5);
			}
			ind = 0;
			Console.WriteLine();
			Console.WriteLine("After");
			foreach (Region_1 elm in R)
			{
				Byte[] b_after = new Byte[j];
				b_after[ind] = bp.BP_get(elm.l, Convert.ToInt32(elm.count_point));
				Console.Write(b_after[ind]);
				Console.Write(' ');
				ind++;
			}

			Console.WriteLine("The end");
			Console.ReadKey();

		}
	}
}

