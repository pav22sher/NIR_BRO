using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Drawing;
using System.Globalization;

namespace my_pp
{
	public class bit_image
	{

		public static int[,] my_save()
		{
			Image Img = Image.FromFile("C:\\Users\\Asus-\\Desktop\\НИРС\\my.png");
			Bitmap bmp = new Bitmap(Img);
			double treshold = 0.6;
			int[,] mas = new int[bmp.Width, bmp.Height];
			for (int i = 0; i < bmp.Width; i++)
			{
				for (int j = 0; j < bmp.Height; j++)
				{
					// 1.
					if (bmp.GetPixel(i, j).GetBrightness() < treshold)
					{
						mas[i, j] = 1;
					}
					else
					{
						mas[i, j] = 0;
					}
				}
			}
			Region_1.Width =  bmp.Width;
			Region_1.Height = bmp.Height;
			Console.WriteLine("W= " +Region_1.Width);
			Console.WriteLine("H= " +Region_1.Height);
			return mas;
		}
		public static void my_recover(int[,] mas)
		{
			
			Boolean flag = false;
			while (!flag)
			{
				mas = Apply(mas);
				int kol_max = mas.GetLength(0) * mas.GetLength(1);
				int kol_now = 0;
				for (int i = 0; i < mas.GetLength(0); i++)
				{
					for (int j = 0; j < mas.GetLength(1); j++)
					{
						if (mas[i, j] != -1) kol_now += 1;
					}
				}
				if (kol_max == kol_now) flag = true;
			}
			//mas = Apply(mas,kernel);
			Bitmap dst = new Bitmap(Region_1.Width, Region_1.Height);
			for (int i = 0; i < Region_1.Width; i++)
			{
				for (int j = 0; j < Region_1.Height; j++)
				{
					if (mas[i, j] == 1)
					{
						dst.SetPixel(i, j, System.Drawing.Color.Black);
					}
					else
					{
						dst.SetPixel(i, j, System.Drawing.Color.White);
					}
				}
			}
			dst.Save("C:\\Users\\Asus-\\Desktop\\НИРС\\my2.png");
		}


		public static int[,] Apply(int[,] input)
		{
			int[,] kernel = new int[3, 3];
			for (int i = 0; i < kernel.GetLength(0); i++)
			{
				for (int j = 0; j < kernel.GetLength(1); j++)
				{
					if (i == 2 && j == 2) kernel[i, j] = 0;
					else kernel[i, j] = 1;
				}
			}
			int width = input.GetLength(0);
			int height = input.GetLength(1);
			int[,] output = new int[width,height];
			int kernelWidth = kernel.GetLength(0);
			int kernelHeight = kernel.GetLength(1);
			//Производим вычисления
			for (int x = 0; x < width; x++)
			{
				for (int y = 0; y < height; y++)
				{
					int Sum = 0, kSum = 0;
					for (int i = 0; i < kernelWidth; i++)
					{
						for (int j = 0; j < kernelHeight; j++)
						{
							int pixelPosX = x + (i - (kernelWidth / 2));
							int pixelPosY = y + (j - (kernelHeight / 2));
							if ((pixelPosX < 0) || (pixelPosX >= width) || (pixelPosY < 0) || (pixelPosY >= height)) continue;
							int v;
							if (input[pixelPosX, pixelPosY] == -1) v = 0;
							else
							{
								v = input[pixelPosX, pixelPosY];
								kSum += kernel[i, j];
							}
							Sum += v * kernel[i, j];
						}
					}

					if (input[x, y] != -1 || kSum == 0) output[x, y] = input[x, y];
					else output[x, y] = Sum / kSum;
				}
			}
			//Возвращаем отфильтрованное изображение
			return output;
		}

	}
	public class bp
	{
		public static List<point> BP_set(int[,] bp1, Region_1 reg)
		{
			int indx = 0;
			int indy = 0;
			get_index(reg, ref indx, ref indy);
			List<point> l = reg.l;
			int count_point = Convert.ToInt32(reg.count_point);
			if (bp1[indx, indy] == 1)
			{
				point max_point_by_y = l[0];
				int index_max_point_by_y = 0;
				foreach (point elm in l)
				{
					if (elm.get_y() > max_point_by_y.get_y())
					{
						max_point_by_y = elm;
						index_max_point_by_y = l.IndexOf(elm);
					}
				}
				int crazy = index_max_point_by_y;
				if (crazy != 0)
				{
					List<point> f = new List<point>();
					for (int i = index_max_point_by_y; i < count_point - 1; i++)
						f.Add(l[i]);
					for (int i = 0; i < index_max_point_by_y + 1; i++)
						f.Add(l[i]);
					l = f;
				}

			}
			else
			{
				point min_point_by_y = l[0];
				int index_min_point_by_y = 0;
				foreach (point elm in l)
				{
					if (elm.get_y() < min_point_by_y.get_y())
					{
						min_point_by_y = elm;
						index_min_point_by_y = l.IndexOf(elm);
					}

				}
				int crazy = index_min_point_by_y;
				if (crazy != 0)
				{
					List<point> f = new List<point>();
					for (int i = index_min_point_by_y; i < count_point - 1; i++)
						f.Add(l[i]);
					for (int i = 0; i < index_min_point_by_y + 1; i++)
						f.Add(l[i]);
					l = f;
				}
			}
			return l;
		}

		public static int BP_get(Region_1 reg,int  bp1)
		{
			
			List<point> l = reg.l;
			int count_point = Convert.ToInt32(reg.count_point);
			point max_point_by_y = l[0];
			int index_max_point_by_y = 0;
			point min_point_by_y = l[0];
			int index_min_point_by_y = 0;

			foreach (point elm in l)
			{
				if (elm.get_y() > max_point_by_y.get_y())
				{
					max_point_by_y = elm;
					index_max_point_by_y = l.IndexOf(elm);
				}
				else if (elm.get_y() < min_point_by_y.get_y())
				{
					min_point_by_y = elm;
					index_min_point_by_y = l.IndexOf(elm);
				}

			}
			if (index_max_point_by_y == 0)
			{
				bp1 = 1;
			}
			else if (index_min_point_by_y == 0)
			{
				bp1 = 0;
			}
			else Console.WriteLine("Error.It is not possible to count bits!");
			return bp1;
		}
		public static void get_index(Region_1 reg,ref int indx,ref  int indy)
		{
			decimal step_x = (Region_1.maxx - Region_1.minx) / Region_1.Width;
			decimal step_y = (Region_1.maxy - Region_1.miny) / Region_1.Height;
			indx = (int)((reg.avg_x-Region_1.minx) /step_x) + 1;
			if (indx >= Region_1.Width)
			{
				indx = (int)((reg.avg_x - Region_1.minx) / step_x);
			}
			indy = (int)((reg.avg_y-Region_1.miny) /step_y) + 1;
			if (indy >= Region_1.Height)
			{
				indy = (int)((reg.avg_y - Region_1.miny) / step_y);
			}
			//Console.WriteLine(indx+" "+indy);
		}
	}

	public class point
	{
		decimal x;
		decimal y;
		public point(decimal xx, decimal yy)
		{
			x = xx;
			y = yy;
		}
		public string pointToString()
		{
			// Замена запятых на точки нужна
			string x_y = x + " " + y;
			return x_y;
		}

		public decimal get_y()
		{
			return y;
		}

		public decimal get_x()
		{
			return x;
		}

	}

	public class Region_1
	{
		public List<point> l;
		public string count_point;
		public string Pen_field;
		public string Brush_field;
		public static decimal minx = 0;
		public static decimal miny = 0;
		public static decimal maxx = 0;
		public static decimal maxy = 0;
		public static int Width = 0;
		public static int Height = 0;
		public  decimal avg_x = 0;
		public  decimal avg_y = 0;
		public Region_1(List<point> ll, string count_point_loc, string P_f, string B_f)
		{
			l = ll;
			count_point = count_point_loc;
			Pen_field = P_f;
			Brush_field = B_f;
			foreach (point pp in l)
			{
				if (pp.get_x() > maxx) maxx = pp.get_x();
				if (pp.get_x() < minx) minx = pp.get_x();
				if (pp.get_y() > maxy) maxy = pp.get_y();
				if (pp.get_y() < miny) miny = pp.get_y();
				avg_x = avg_x + pp.get_x();
				avg_y = avg_y + pp.get_y();
			}
			avg_x = avg_x / Convert.ToInt32(count_point);
			avg_y = avg_y / Convert.ToInt32(count_point);
		}

	}


	class MainClass
	{


		public static void Main(string[] args)
		{
			List<Region_1> R = new List<Region_1>();
			int j = 0;

			try
			{   // Open the text file using a stream reader.
				using (StreamReader sr = new StreamReader("C:\\Users\\Asus-\\Desktop\\НИРС\\BPD.mif"))
				{
					using (System.IO.StreamWriter file = new System.IO.StreamWriter("C:\\Users\\Asus-\\Desktop\\НИРС\\tup.mif"))
					{
						// Список, состоящий из списков точек-вершин -полигон

						while (!sr.EndOfStream)
						{
							string line = sr.ReadLine();
							string Reg = ("Region 1");
							string Bounds = ("Bounds");

							if (!line.Contains(Reg)&&!line.Contains(Bounds))
							{
								file.WriteLine(line);
							}

							if (line.Contains(Bounds))
							{
								var str = line.Split(' ', ',', '(', ')');
								Region_1.maxx = Convert.ToDecimal(str[6], CultureInfo.GetCultureInfo("en-US"));//maxx=min по x в карте
								Region_1.maxy = Convert.ToDecimal(str[8], CultureInfo.GetCultureInfo("en-US"));//maxy=min по y в карте
								Region_1.minx = Convert.ToDecimal(str[11], CultureInfo.GetCultureInfo("en-US"));//minx=max по x в карте
								Region_1.miny = Convert.ToDecimal(str[13], CultureInfo.GetCultureInfo("en-US"));//miny=max по y в карте
								file.WriteLine(line);
							}

							if (line.Contains(Reg))
							{
								j++;
								List<point> l = new List<point>();
								int count_point_loc = Convert.ToInt32(sr.ReadLine());
								//Console.WriteLine("count_point: " + count_point_loc);
								for (int i = 0; i < count_point_loc; i++)
								{
									string x_y_point = sr.ReadLine();
									decimal x = 0;
									decimal y = 0;
									var str = x_y_point.Split(' ');
									x = Convert.ToDecimal(str[0], CultureInfo.GetCultureInfo("en-US"));
									y = Convert.ToDecimal(str[1], CultureInfo.GetCultureInfo("en-US"));
									point p = new point(x, y);
									l.Add(p);
								}

								string vedro1 = sr.ReadLine();
								string vedro2 = sr.ReadLine();

								Region_1 RR = new Region_1(l, Convert.ToString(count_point_loc), vedro1, vedro2);
								R.Add(RR);
							}
						}


						try
						{
							using (System.IO.StreamWriter file_f = new System.IO.StreamWriter("C:\\Users\\Asus-\\Desktop\\НИРС\\bp_before.txt"))
							{

								int[,] b_before = bit_image.my_save();

								foreach (Region_1 elm in R)
								{
									//Random rnd = new Random();
									//Byte[] b_before = new Byte[2 * j];
									//b_before[ind] = (Byte)rnd.Next(0, 2);
									//file_f.WriteLine(Convert.ToString(b_before[ind]));
									elm.l = bp.BP_set(b_before, elm);
								}
								for (int i = 0; i < Region_1.Width; i++)
								{
									for (int k = 0; k < Region_1.Height; k++)
									{
										file_f.Write(b_before[i, k]);
									}
									file_f.WriteLine();
								}

								file_f.Close();
							}
						}
						catch (Exception e)
						{
							Console.WriteLine("The file Error:");
							Console.WriteLine(e.Message);
						}
						//Вывод полигонов в файл после встраивания
						foreach (Region_1 RR in R)
						{
							file.WriteLine("Region 1");
							file.WriteLine("  " + Convert.ToString(RR.count_point));

							//запись полигонов точек полигона в файл
							foreach (point pp in RR.l)
							{
								file.WriteLine(pp.pointToString().Replace(",", "."));
							}
							file.WriteLine("  " + RR.Pen_field);
							file.WriteLine("  " + RR.Brush_field);
						}
						file.Close();
					}


					try
					{
						using (System.IO.StreamWriter file = new System.IO.StreamWriter("C:\\Users\\Asus-\\Desktop\\НИРС\\bp_after.txt"))
						{
							int[,] b_after = new int[Region_1.Width, Region_1.Height];
							for (int i = 0; i < Region_1.Width; i++)
							{
								for (int k = 0; k < Region_1.Height; k++)
								{
									b_after[i, k] = -1;
								}
							}
							foreach (Region_1 elm in R)
							{
								int indx = 0;
								int indy = 0;
								bp.get_index(elm, ref indx, ref indy);
								b_after[indx,indy] = bp.BP_get(elm, b_after[indx,indy]);// передача по ссылке 
							}
							for (int i = 0; i < Region_1.Width; i++)
							{
								for (int k = 0; k < Region_1.Height; k++)
								{
									if (b_after[i, k] == 1 || b_after[i, k] == 0)
									{
										file.Write(b_after[i, k]);
									}
									else file.Write(" ");
								}
								file.WriteLine();
							}
							file.Close();
							bit_image.my_recover(b_after);
						}
					}
					catch (Exception e)
					{
						Console.WriteLine("The file Error:");
						Console.WriteLine(e.Message);
					}

					//file.Close();
					Console.WriteLine("Count of Region 1 = " + j);
				}

			}
			catch (Exception e)
			{
				Console.WriteLine("The file could not be read:");
				Console.WriteLine(e.Message);
			}
			Console.WriteLine("The end");
			Console.ReadKey();
		}
	}
}